# This file is generated by gyp; do not edit.

TOOLSET := target
TARGET := cld-c
DEFS_Debug := \
	'-D_DARWIN_USE_64_BIT_INODE=1' \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-DDEBUG' \
	'-D_DEBUG'

# Flags passed to all source files.
CFLAGS_Debug := \
	-O0 \
	-gdwarf-2 \
	-mmacosx-version-min=10.5 \
	-arch x86_64 \
	-Wall \
	-Wendif-labels \
	-W \
	-Wno-unused-parameter

# Flags passed to only C files.
CFLAGS_C_Debug := \
	-fno-strict-aliasing \
	-w

# Flags passed to only C++ files.
CFLAGS_CC_Debug := \
	-std=c++98 \
	-fno-rtti \
	-fno-exceptions \
	-fno-threadsafe-statics \
	-fno-strict-aliasing \
	-w

# Flags passed to only ObjC files.
CFLAGS_OBJC_Debug :=

# Flags passed to only ObjC++ files.
CFLAGS_OBJCC_Debug :=

INCS_Debug := \
	-I/Users/allenhsiao/.node-gyp/0.12.0/src \
	-I/Users/allenhsiao/.node-gyp/0.12.0/deps/uv/include \
	-I/Users/allenhsiao/.node-gyp/0.12.0/deps/v8/include \
	-I$(srcdir)/deps/cld/internal

DEFS_Release := \
	'-D_DARWIN_USE_64_BIT_INODE=1' \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64'

# Flags passed to all source files.
CFLAGS_Release := \
	-Os \
	-gdwarf-2 \
	-mmacosx-version-min=10.5 \
	-arch x86_64 \
	-Wall \
	-Wendif-labels \
	-W \
	-Wno-unused-parameter

# Flags passed to only C files.
CFLAGS_C_Release := \
	-fno-strict-aliasing \
	-w

# Flags passed to only C++ files.
CFLAGS_CC_Release := \
	-std=c++98 \
	-fno-rtti \
	-fno-exceptions \
	-fno-threadsafe-statics \
	-fno-strict-aliasing \
	-w

# Flags passed to only ObjC files.
CFLAGS_OBJC_Release :=

# Flags passed to only ObjC++ files.
CFLAGS_OBJCC_Release :=

INCS_Release := \
	-I/Users/allenhsiao/.node-gyp/0.12.0/src \
	-I/Users/allenhsiao/.node-gyp/0.12.0/deps/uv/include \
	-I/Users/allenhsiao/.node-gyp/0.12.0/deps/v8/include \
	-I$(srcdir)/deps/cld/internal

OBJS := \
	$(obj).target/$(TARGET)/deps/cld/internal/cldutil.o \
	$(obj).target/$(TARGET)/deps/cld/internal/cldutil_shared.o \
	$(obj).target/$(TARGET)/deps/cld/internal/compact_lang_det.o \
	$(obj).target/$(TARGET)/deps/cld/internal/compact_lang_det_hint_code.o \
	$(obj).target/$(TARGET)/deps/cld/internal/compact_lang_det_impl.o \
	$(obj).target/$(TARGET)/deps/cld/internal/debug.o \
	$(obj).target/$(TARGET)/deps/cld/internal/fixunicodevalue.o \
	$(obj).target/$(TARGET)/deps/cld/internal/generated_entities.o \
	$(obj).target/$(TARGET)/deps/cld/internal/generated_language.o \
	$(obj).target/$(TARGET)/deps/cld/internal/generated_ulscript.o \
	$(obj).target/$(TARGET)/deps/cld/internal/getonescriptspan.o \
	$(obj).target/$(TARGET)/deps/cld/internal/lang_script.o \
	$(obj).target/$(TARGET)/deps/cld/internal/offsetmap.o \
	$(obj).target/$(TARGET)/deps/cld/internal/scoreonescriptspan.o \
	$(obj).target/$(TARGET)/deps/cld/internal/tote.o \
	$(obj).target/$(TARGET)/deps/cld/internal/utf8statetable.o \
	$(obj).target/$(TARGET)/deps/cld/internal/cld_generated_cjk_uni_prop_80.o \
	$(obj).target/$(TARGET)/deps/cld/internal/cld2_generated_cjk_compatible.o \
	$(obj).target/$(TARGET)/deps/cld/internal/cld_generated_cjk_delta_bi_32.o \
	$(obj).target/$(TARGET)/deps/cld/internal/generated_distinct_bi_0.o \
	$(obj).target/$(TARGET)/deps/cld/internal/cld2_generated_quad0122.o \
	$(obj).target/$(TARGET)/deps/cld/internal/cld2_generated_deltaocta0122.o \
	$(obj).target/$(TARGET)/deps/cld/internal/cld2_generated_distinctocta0122.o \
	$(obj).target/$(TARGET)/deps/cld/internal/cld_generated_score_quad_octa_0122.o

# Add to the list of files we specially track dependencies for.
all_deps += $(OBJS)

# CFLAGS et al overrides must be target-local.
# See "Target-specific Variable Values" in the GNU Make manual.
$(OBJS): TOOLSET := $(TOOLSET)
$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))
$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))
$(OBJS): GYP_OBJCFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))
$(OBJS): GYP_OBJCXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))

# Suffix rules, putting all outputs into $(obj).

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# Try building from generated source, too.

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# End of this set of suffix rules
### Rules for final target.
LDFLAGS_Debug := \
	-mmacosx-version-min=10.5 \
	-arch x86_64 \
	-L$(builddir)

LIBTOOLFLAGS_Debug :=

LDFLAGS_Release := \
	-mmacosx-version-min=10.5 \
	-arch x86_64 \
	-L$(builddir)

LIBTOOLFLAGS_Release :=

LIBS := \
	-undefined dynamic_lookup

$(builddir)/cld-c.a: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))
$(builddir)/cld-c.a: LIBS := $(LIBS)
$(builddir)/cld-c.a: GYP_LIBTOOLFLAGS := $(LIBTOOLFLAGS_$(BUILDTYPE))
$(builddir)/cld-c.a: TOOLSET := $(TOOLSET)
$(builddir)/cld-c.a: $(OBJS) FORCE_DO_CMD
	$(call do_cmd,alink)

all_deps += $(builddir)/cld-c.a
# Add target alias
.PHONY: cld-c
cld-c: $(builddir)/cld-c.a

# Add target alias to "all" target.
.PHONY: all
all: cld-c

# Add target alias
.PHONY: cld-c
cld-c: $(builddir)/cld-c.a

# Short alias for building this static library.
.PHONY: cld-c.a
cld-c.a: $(builddir)/cld-c.a

# Add static library to "all" target.
.PHONY: all
all: $(builddir)/cld-c.a

